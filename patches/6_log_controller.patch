Subject: [PATCH] 6_log_controller
---
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision a95130aff1a61ea9286d9b2045fb07271b318195)
+++ b/build.gradle.kts	(date 1701184423747)
@@ -22,6 +22,7 @@
 
 val jsoupVersion = "1.17.1"
 val springdocVersion = "2.2.0"
+val kotlinLoggingVersion = "5.1.1"
 dependencies {
     implementation("org.springframework.boot:spring-boot-starter-data-jpa")
     implementation("org.springframework.boot:spring-boot-starter-security")
@@ -31,6 +32,7 @@
     implementation("org.jsoup:jsoup:$jsoupVersion")
     implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
     implementation("org.jetbrains.kotlin:kotlin-reflect")
+    implementation("io.github.oshai:kotlin-logging-jvm:$kotlinLoggingVersion")
     runtimeOnly("com.h2database:h2")
     testImplementation("org.springframework.boot:spring-boot-starter-test")
     testImplementation("org.springframework.security:spring-security-test")
Index: src/main/kotlin/ru/javaops/topkotlin/web/user/AbstractUserController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/web/user/AbstractUserController.kt b/src/main/kotlin/ru/javaops/topkotlin/web/user/AbstractUserController.kt
new file mode 100644
--- /dev/null	(date 1701184311024)
+++ b/src/main/kotlin/ru/javaops/topkotlin/web/user/AbstractUserController.kt	(date 1701184311024)
@@ -0,0 +1,31 @@
+package ru.javaops.topkotlin.web.user
+
+import io.github.oshai.kotlinlogging.KotlinLogging
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.web.bind.WebDataBinder
+import org.springframework.web.bind.annotation.InitBinder
+import ru.javaops.topkotlin.model.User
+import ru.javaops.topkotlin.repository.UserRepository
+
+abstract class AbstractUserController {
+    val log = KotlinLogging.logger {}
+
+    @Autowired
+    protected lateinit var repository: UserRepository
+
+    @Autowired
+    private lateinit var emailValidator: UniqueMailValidator
+
+    @InitBinder
+    open fun initBinder(binder: WebDataBinder): Unit = binder.addValidators(emailValidator)
+
+    open operator fun get(id: Int): User {
+        log.info { "get $id" }
+        return repository.getExisted(id)
+    }
+
+    open fun delete(id: Int) {
+        log.info { "delete $id" }
+        repository.deleteExisted(id)
+    }
+}
\ No newline at end of file
Index: src/main/kotlin/ru/javaops/topkotlin/web/user/AdminUserController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/web/user/AdminUserController.kt b/src/main/kotlin/ru/javaops/topkotlin/web/user/AdminUserController.kt
new file mode 100644
--- /dev/null	(date 1701184311028)
+++ b/src/main/kotlin/ru/javaops/topkotlin/web/user/AdminUserController.kt	(date 1701184311028)
@@ -0,0 +1,69 @@
+package ru.javaops.topkotlin.web.user
+
+import jakarta.validation.Valid
+import org.springframework.data.domain.Sort
+import org.springframework.http.HttpStatus
+import org.springframework.http.MediaType
+import org.springframework.http.ResponseEntity
+import org.springframework.transaction.annotation.Transactional
+import org.springframework.web.bind.annotation.*
+import org.springframework.web.servlet.support.ServletUriComponentsBuilder
+import ru.javaops.topkotlin.model.User
+import ru.javaops.topkotlin.web.RestValidation.assureIdConsistent
+import ru.javaops.topkotlin.web.RestValidation.checkNew
+
+@RestController
+@RequestMapping(value = [AdminUserController.REST_URL], produces = [MediaType.APPLICATION_JSON_VALUE])
+
+class AdminUserController : AbstractUserController() {
+    companion object {
+        const val REST_URL = "/api/admin/users"
+    }
+
+    @GetMapping("/{id}")
+    override fun get(@PathVariable id: Int) = super.get(id)
+
+    @DeleteMapping("/{id}")
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    override fun delete(@PathVariable id: Int) = super.delete(id)
+
+    @GetMapping
+    fun getAll(): List<User> {
+        log.info { "getAll" }
+        return repository.findAll(Sort.by(Sort.Direction.ASC, "name", "email"))
+    }
+
+    @PostMapping(consumes = [MediaType.APPLICATION_JSON_VALUE])
+    fun createWithLocation(@RequestBody @Valid user: User): ResponseEntity<User> {
+        log.info { "create $user" }
+        checkNew(user)
+        val created: User = repository.prepareAndSave(user)
+        val uriOfNewResource = ServletUriComponentsBuilder.fromCurrentContextPath()
+            .path("$REST_URL/{id}")
+            .buildAndExpand(created.id).toUri()
+        return ResponseEntity.created(uriOfNewResource).body(created)
+    }
+
+    @PutMapping(value = ["/{id}"], consumes = [MediaType.APPLICATION_JSON_VALUE])
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    fun update(@RequestBody @Valid user: User, @PathVariable id: Int) {
+        log.info { "update $user with id=$id" }
+        assureIdConsistent(user, id)
+        repository.prepareAndSave(user)
+    }
+
+    @GetMapping("/by-email")
+    fun getByEmail(@RequestParam email: String): User {
+        log.info { "getByEmail $email" }
+        return repository.getExistedByEmail(email)
+    }
+
+    @PatchMapping("/{id}")
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    @Transactional
+    fun enable(@PathVariable id: Int, @RequestParam enabled: Boolean) {
+        log.info { if (enabled) "enable $id" else "disable $id" }
+        val user = repository.getExisted(id)
+        user.enabled = enabled
+    }
+}
\ No newline at end of file
Index: src/main/kotlin/ru/javaops/topkotlin/web/user/ProfileController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/web/user/ProfileController.kt b/src/main/kotlin/ru/javaops/topkotlin/web/user/ProfileController.kt
new file mode 100644
--- /dev/null	(date 1701184311033)
+++ b/src/main/kotlin/ru/javaops/topkotlin/web/user/ProfileController.kt	(date 1701184311033)
@@ -0,0 +1,53 @@
+package ru.javaops.topkotlin.web.user
+
+import jakarta.validation.Valid
+import org.springframework.http.HttpStatus
+import org.springframework.http.MediaType
+import org.springframework.http.ResponseEntity
+import org.springframework.security.core.annotation.AuthenticationPrincipal
+import org.springframework.transaction.annotation.Transactional
+import org.springframework.web.bind.annotation.*
+import org.springframework.web.servlet.support.ServletUriComponentsBuilder
+import ru.javaops.topkotlin.model.User
+import ru.javaops.topkotlin.to.UserTo
+import ru.javaops.topkotlin.util.UsersUtil
+import ru.javaops.topkotlin.web.AuthUser
+import ru.javaops.topkotlin.web.RestValidation.assureIdConsistent
+import ru.javaops.topkotlin.web.RestValidation.checkNew
+
+@RestController
+@RequestMapping(value = [ProfileController.REST_URL], produces = [MediaType.APPLICATION_JSON_VALUE])
+class ProfileController : AbstractUserController() {
+    companion object {
+        const val REST_URL = "/api/profile"
+    }
+
+    @GetMapping
+    fun get(@AuthenticationPrincipal authUser: AuthUser): User {
+        log.info { "get $authUser" }
+        return authUser.user
+    }
+
+    @DeleteMapping
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    fun delete(@AuthenticationPrincipal authUser: AuthUser) = super.delete(authUser.id())
+
+    @PostMapping(consumes = [MediaType.APPLICATION_JSON_VALUE])
+    @ResponseStatus(HttpStatus.CREATED)
+    fun register(@RequestBody @Valid userTo: UserTo): ResponseEntity<User> {
+        log.info { "register $userTo" }
+        checkNew(userTo)
+        val created = repository.prepareAndSave(UsersUtil.createNewFromTo(userTo))
+        val uriOfNewResource = ServletUriComponentsBuilder.fromCurrentContextPath().path(REST_URL).build().toUri()
+        return ResponseEntity.created(uriOfNewResource).body(created)
+    }
+
+    @PutMapping(consumes = [MediaType.APPLICATION_JSON_VALUE])
+    @ResponseStatus(HttpStatus.NO_CONTENT)
+    @Transactional
+    fun update(@RequestBody @Valid userTo: UserTo, @AuthenticationPrincipal authUser: AuthUser) {
+        log.info { "update $userTo with id=${authUser.id()}" }
+        assureIdConsistent(userTo, authUser.id())
+        repository.prepareAndSave(UsersUtil.updateFromTo(authUser.user, userTo))
+    }
+}
\ No newline at end of file

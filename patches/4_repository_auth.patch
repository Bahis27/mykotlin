Subject: [PATCH] 4_repository_auth
---
Index: src/main/kotlin/ru/javaops/topkotlin/web/AuthUser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/web/AuthUser.kt b/src/main/kotlin/ru/javaops/topkotlin/web/AuthUser.kt
new file mode 100644
--- /dev/null	(date 1698393677337)
+++ b/src/main/kotlin/ru/javaops/topkotlin/web/AuthUser.kt	(date 1698393677337)
@@ -0,0 +1,21 @@
+package ru.javaops.topkotlin.web
+
+import org.springframework.security.core.context.SecurityContextHolder
+import ru.javaops.topkotlin.model.Role
+import ru.javaops.topkotlin.model.User
+import org.springframework.security.core.userdetails.User as SecurityUser
+
+fun safeAuthUser(): AuthUser? {
+    val auth = SecurityContextHolder.getContext().authentication ?: return null
+    val principal = auth.principal
+    return if (principal is AuthUser) principal else null
+}
+
+fun authUser(): AuthUser = checkNotNull(safeAuthUser()) { "No authorized user found" }
+
+class AuthUser(var user: User) : SecurityUser(user.email, user.password, user.roles) {
+    fun id() = user.id()
+    fun hasRole(role: Role) = user.hasRole(role)
+
+    override fun toString() = "AuthUser:${user.id}[${user.email}]"
+}
\ No newline at end of file
Index: src/main/kotlin/ru/javaops/topkotlin/repository/BaseRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/repository/BaseRepository.kt b/src/main/kotlin/ru/javaops/topkotlin/repository/BaseRepository.kt
new file mode 100644
--- /dev/null	(date 1698393677336)
+++ b/src/main/kotlin/ru/javaops/topkotlin/repository/BaseRepository.kt	(date 1698393677336)
@@ -0,0 +1,26 @@
+package ru.javaops.topkotlin.repository
+
+import org.springframework.data.jpa.repository.JpaRepository
+import org.springframework.data.jpa.repository.Modifying
+import org.springframework.data.jpa.repository.Query
+import org.springframework.data.repository.NoRepositoryBean
+import org.springframework.transaction.annotation.Transactional
+import ru.javaops.topkotlin.error.NotFoundException
+
+// https://stackoverflow.com/questions/42781264/multiple-base-repositories-in-spring-data-jpa
+@NoRepositoryBean
+@JvmDefaultWithCompatibility
+interface BaseRepository<T> : JpaRepository<T, Int?> {
+    //    https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query.spel-expressions
+    @Transactional
+    @Modifying
+    @Query("DELETE FROM #{#entityName} e WHERE e.id=:id")
+    fun delete(id: Int): Int
+
+    //  https://stackoverflow.com/a/60695301/548473 (existed delete code 204, not existed: 404)
+    fun deleteExisted(id: Int) {
+        if (delete(id) == 0) throw NotFoundException("Entity with id=$id not found")
+    }
+
+    fun getExisted(id: Int): T = findById(id).orElseThrow { NotFoundException("Entity with id=$id not found") }
+}
\ No newline at end of file
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision 1debaa1111f81f45369d543bc0e293a4a21d9a99)
+++ b/build.gradle.kts	(date 1698393699288)
@@ -39,7 +39,7 @@
 tasks.withType<KotlinCompile> {
     compilerOptions.jvmTarget.set(JvmTarget.JVM_20)
     kotlinOptions {
-        freeCompilerArgs += "-Xjsr305=strict"
+        freeCompilerArgs += listOf("-Xjsr305=strict", "-Xjvm-default=all")
     }
 }
 
Index: src/main/kotlin/ru/javaops/topkotlin/repository/UserRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/repository/UserRepository.kt b/src/main/kotlin/ru/javaops/topkotlin/repository/UserRepository.kt
new file mode 100644
--- /dev/null	(date 1698393781502)
+++ b/src/main/kotlin/ru/javaops/topkotlin/repository/UserRepository.kt	(date 1698393781502)
@@ -0,0 +1,22 @@
+package ru.javaops.topkotlin.repository
+
+import org.springframework.data.jpa.repository.Query
+import org.springframework.transaction.annotation.Transactional
+import ru.javaops.topkotlin.error.NotFoundException
+import ru.javaops.topkotlin.model.User
+import java.util.*
+
+@Transactional(readOnly = true)
+interface UserRepository : BaseRepository<User> {
+    @Query("SELECT u FROM User u WHERE u.email = LOWER(:email)")
+    fun findByEmailIgnoreCase(email: String): User?
+
+    @Transactional
+    fun prepareAndSave(user: User): User = with(user) {
+//        password = PASSWORD_ENCODER.encode(password)
+        email = email.lowercase()
+        save(this)
+    }
+
+    fun getExistedByEmail(email: String): User = findByEmailIgnoreCase(email) ?: throw NotFoundException("User with email=$email not found")
+}
\ No newline at end of file

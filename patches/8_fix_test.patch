Subject: [PATCH] 8_fix_test
---
Index: src/main/kotlin/ru/javaops/topkotlin/model/User.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ru/javaops/topkotlin/model/User.kt b/src/main/kotlin/ru/javaops/topkotlin/model/User.kt
--- a/src/main/kotlin/ru/javaops/topkotlin/model/User.kt	(revision 07ea33e0d30b96eb8f5de25f6720c9419e41064d)
+++ b/src/main/kotlin/ru/javaops/topkotlin/model/User.kt	(date 1698422212411)
@@ -45,7 +45,7 @@
     @field:JoinColumn
     @field:OnDelete(action = OnDeleteAction.CASCADE)
     @field:Column(name = "role")
-    var roles: MutableSet<Role> = EnumSet.noneOf(Role::class.java)
+    @JvmField var roles: MutableSet<Role> = EnumSet.noneOf(Role::class.java)
 
 ) : NamedEntity(id, name), HasIdAndEmail {
 
Index: src/test/kotlin/ru/javaops/topkotlin/web/user/ProfileControllerTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/ru/javaops/topkotlin/web/user/ProfileControllerTest.kt b/src/test/kotlin/ru/javaops/topkotlin/web/user/ProfileControllerTest.kt
new file mode 100644
--- /dev/null	(date 1698423360501)
+++ b/src/test/kotlin/ru/javaops/topkotlin/web/user/ProfileControllerTest.kt	(date 1698423360501)
@@ -0,0 +1,114 @@
+package ru.javaops.topkotlin.web.user
+
+import org.hamcrest.Matchers
+import org.junit.jupiter.api.Test
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.http.MediaType
+import org.springframework.security.test.context.support.WithUserDetails
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders
+import org.springframework.test.web.servlet.result.MockMvcResultHandlers
+import org.springframework.test.web.servlet.result.MockMvcResultMatchers
+import ru.javaops.topkotlin.repository.UserRepository
+import ru.javaops.topkotlin.to.UserTo
+import ru.javaops.topkotlin.util.JsonUtil
+import ru.javaops.topkotlin.util.UsersUtil
+import ru.javaops.topkotlin.web.AbstractControllerTest
+import ru.javaops.topkotlin.web.user.ProfileController.Companion.REST_URL
+
+class ProfileControllerTest @Autowired constructor(
+    private val repository: UserRepository
+
+) : AbstractControllerTest() {
+
+    @Test
+    @WithUserDetails(value = USER_MAIL)
+    fun get() {
+        perform(MockMvcRequestBuilders.get(REST_URL))
+            .andExpect(MockMvcResultMatchers.status().isOk)
+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+            .andExpect(USER_MATCHER.contentJson(user))
+    }
+
+    @Test
+    fun getUnauthorized() {
+        perform(MockMvcRequestBuilders.get(REST_URL))
+            .andExpect(MockMvcResultMatchers.status().isUnauthorized)
+    }
+
+    @Test
+    @WithUserDetails(value = USER_MAIL)
+    fun delete() {
+        perform(MockMvcRequestBuilders.delete(REST_URL))
+            .andExpect(MockMvcResultMatchers.status().isNoContent)
+        USER_MATCHER.assertMatch(repository.findAll(), admin, guest)
+    }
+
+    @Test
+    fun register() {
+        val newTo = UserTo(null, "newName", "newemail@ya.ru", "newPassword")
+        val newUser = UsersUtil.createNewFromTo(newTo)
+        val action = perform(
+            MockMvcRequestBuilders.post(REST_URL)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(JsonUtil.writeValue(newTo))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isCreated)
+        val created = USER_MATCHER.readFromJson(action)
+        val newId = created.id()
+        newUser.id = newId
+        USER_MATCHER.assertMatch(created, newUser)
+        USER_MATCHER.assertMatch(repository.getExisted(newId), newUser)
+    }
+
+    @Test
+    @WithUserDetails(value = USER_MAIL)
+    fun update() {
+        val updatedTo = UserTo(null, "newName", USER_MAIL, "newPassword")
+        perform(
+            MockMvcRequestBuilders.put(REST_URL).contentType(MediaType.APPLICATION_JSON)
+                .content(JsonUtil.writeValue(updatedTo))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNoContent)
+        USER_MATCHER.assertMatch(repository.getExisted(USER_ID), UsersUtil.updateFromTo(user.copy(), updatedTo))
+    }
+
+    @Test
+    fun registerInvalid() {
+        val newTo = UserTo(null, "", "", "")
+        perform(
+            MockMvcRequestBuilders.post(REST_URL)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(JsonUtil.writeValue(newTo))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+    }
+
+    @Test
+    @WithUserDetails(value = USER_MAIL)
+    fun updateInvalid() {
+        val updatedTo = UserTo(null, "", "password", "")
+        perform(
+            MockMvcRequestBuilders.put(REST_URL)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(JsonUtil.writeValue(updatedTo))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+    }
+
+    @Test
+    @WithUserDetails(value = USER_MAIL)
+    fun updateDuplicate() {
+        val updatedTo = UserTo(null, "newName", ADMIN_MAIL, "newPassword")
+        perform(
+            MockMvcRequestBuilders.put(REST_URL).contentType(MediaType.APPLICATION_JSON)
+                .content(JsonUtil.writeValue(updatedTo))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+            .andExpect(MockMvcResultMatchers.content().string(Matchers.containsString(UniqueMailValidator.EXCEPTION_DUPLICATE_EMAIL)))
+    }
+}
\ No newline at end of file
Index: src/test/kotlin/ru/javaops/topkotlin/web/user/AdminUserControllerTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/ru/javaops/topkotlin/web/user/AdminUserControllerTest.kt b/src/test/kotlin/ru/javaops/topkotlin/web/user/AdminUserControllerTest.kt
new file mode 100644
--- /dev/null	(date 1698424357109)
+++ b/src/test/kotlin/ru/javaops/topkotlin/web/user/AdminUserControllerTest.kt	(date 1698424357109)
@@ -0,0 +1,219 @@
+package ru.javaops.topkotlin.web.user
+
+import org.hamcrest.Matchers
+import org.junit.jupiter.api.Assertions
+import org.junit.jupiter.api.Test
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.http.MediaType
+import org.springframework.security.test.context.support.WithUserDetails
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders
+import org.springframework.test.web.servlet.result.MockMvcResultHandlers
+import org.springframework.test.web.servlet.result.MockMvcResultMatchers
+import org.springframework.transaction.annotation.Propagation
+import org.springframework.transaction.annotation.Transactional
+import ru.javaops.topkotlin.model.Role
+import ru.javaops.topkotlin.model.User
+import ru.javaops.topkotlin.repository.UserRepository
+import ru.javaops.topkotlin.web.AbstractControllerTest
+import ru.javaops.topkotlin.web.user.AdminUserController.Companion.REST_URL
+
+private const val REST_URL_SLASH: String = "${REST_URL}/"
+
+class AdminUserControllerTest @Autowired constructor(
+    private val repository: UserRepository
+
+) : AbstractControllerTest() {
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun get() {
+        perform(MockMvcRequestBuilders.get(REST_URL_SLASH + ADMIN_ID))
+            .andExpect(MockMvcResultMatchers.status().isOk)
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+            .andExpect(USER_MATCHER.contentJson(admin))
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun getNotFound() {
+        perform(MockMvcRequestBuilders.get(REST_URL_SLASH + NOT_FOUND))
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNotFound)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun getByEmail() {
+        perform(MockMvcRequestBuilders.get("${REST_URL_SLASH}by-email?email=${admin.email}"))
+            .andExpect(MockMvcResultMatchers.status().isOk)
+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+            .andExpect(USER_MATCHER.contentJson(admin))
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun delete() {
+        perform(MockMvcRequestBuilders.delete(REST_URL_SLASH + USER_ID))
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNoContent)
+        Assertions.assertFalse(repository.findById(USER_ID).isPresent)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun deleteNotFound() {
+        perform(MockMvcRequestBuilders.delete(REST_URL_SLASH + NOT_FOUND))
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNotFound)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun enableNotFound() {
+        perform(
+            MockMvcRequestBuilders.patch(REST_URL_SLASH + NOT_FOUND)
+                .param("enabled", "false")
+                .contentType(MediaType.APPLICATION_JSON)
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNotFound)
+    }
+
+    @Test
+    fun getUnauthorized() {
+        perform(MockMvcRequestBuilders.get(REST_URL))
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnauthorized)
+    }
+
+    @Test
+    @WithUserDetails(value = USER_MAIL)
+    fun getForbidden() {
+        perform(MockMvcRequestBuilders.get(REST_URL))
+            .andExpect(MockMvcResultMatchers.status().isForbidden)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun update() {
+        val updated = getUpdated()
+        updated.id = null
+        perform(
+            MockMvcRequestBuilders.put(REST_URL_SLASH + USER_ID)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(updated, "newPass"))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNoContent)
+        USER_MATCHER.assertMatch(repository.getExisted(USER_ID), getUpdated())
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun createWithLocation() {
+        val newUser = getNew()
+        val action = perform(
+            MockMvcRequestBuilders.post(REST_URL)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(newUser, "newPass"))
+        )
+            .andExpect(MockMvcResultMatchers.status().isCreated)
+        val created = USER_MATCHER.readFromJson(action)
+        val newId = created.id()
+        newUser.id = newId
+        USER_MATCHER.assertMatch(created, newUser)
+        USER_MATCHER.assertMatch(repository.getExisted(newId), newUser)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun getAll() {
+        perform(MockMvcRequestBuilders.get(REST_URL))
+            .andExpect(MockMvcResultMatchers.status().isOk)
+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+            .andExpect(USER_MATCHER.contentJson(admin, guest, user))
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun enable() {
+        perform(
+            MockMvcRequestBuilders.patch(REST_URL_SLASH + USER_ID)
+                .param("enabled", "false")
+                .contentType(MediaType.APPLICATION_JSON)
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isNoContent)
+        Assertions.assertFalse(repository.getExisted(USER_ID).enabled)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun createInvalid() {
+        val invalid = User(null, "", "", "newPass", Role.USER, Role.ADMIN)
+        perform(
+            MockMvcRequestBuilders.post(REST_URL)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(invalid, "newPass"))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun updateInvalid() {
+        val invalid = user.copy(name = "")
+        perform(
+            MockMvcRequestBuilders.put(REST_URL_SLASH + USER_ID)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(invalid, "password"))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+    }
+
+    @Test
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun updateHtmlUnsafe() {
+        val updated = user.copy(name = "<script>alert(123)</script>")
+        perform(
+            MockMvcRequestBuilders.put(REST_URL_SLASH + USER_ID)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(updated, "password"))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+    }
+
+    @Test
+    @Transactional(propagation = Propagation.NEVER)
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun updateDuplicate() {
+        val updated = user.copy(email = ADMIN_MAIL)
+        perform(
+            MockMvcRequestBuilders.put(REST_URL_SLASH + USER_ID)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(updated, "password"))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+            .andExpect(MockMvcResultMatchers.content().string(Matchers.containsString(UniqueMailValidator.EXCEPTION_DUPLICATE_EMAIL)))
+    }
+
+    @Test
+    @Transactional(propagation = Propagation.NEVER)
+    @WithUserDetails(value = ADMIN_MAIL)
+    fun createDuplicate() {
+        val expected = User(null, "New", USER_MAIL, "newPass", Role.USER, Role.ADMIN)
+        perform(
+            MockMvcRequestBuilders.post(REST_URL)
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(jsonWithPassword(expected, "newPass"))
+        )
+            .andDo(MockMvcResultHandlers.print())
+            .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity)
+            .andExpect(MockMvcResultMatchers.content().string(Matchers.containsString(UniqueMailValidator.EXCEPTION_DUPLICATE_EMAIL)))
+    }
+}
\ No newline at end of file
Index: src/test/kotlin/ru/javaops/topkotlin/web/MatcherFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/ru/javaops/topkotlin/web/MatcherFactory.kt b/src/test/kotlin/ru/javaops/topkotlin/web/MatcherFactory.kt
new file mode 100644
--- /dev/null	(date 1698422719843)
+++ b/src/test/kotlin/ru/javaops/topkotlin/web/MatcherFactory.kt	(date 1698422719843)
@@ -0,0 +1,61 @@
+package ru.javaops.topkotlin.web
+
+import org.assertj.core.api.Assertions
+import org.springframework.test.web.servlet.MvcResult
+import org.springframework.test.web.servlet.ResultActions
+import org.springframework.test.web.servlet.ResultMatcher
+import ru.javaops.topkotlin.util.JsonUtil
+import java.util.function.BiConsumer
+import kotlin.reflect.KClass
+
+/**
+ * Factory for creating test matchers.
+ *
+ * Comparing actual and expected objects via AssertJ
+ * Support converting json MvcResult to objects for comparation.
+ */
+
+object MatcherFactory {
+    fun <T : Any> usingAssertions(
+        clazz: KClass<T>,
+        assertion: BiConsumer<T, T>,
+        iterableAssertion: BiConsumer<Iterable<T>, Iterable<T>>
+    ): Matcher<T> = Matcher(clazz, assertion, iterableAssertion)
+
+    fun <T : Any> usingEqualsComparator(clazz: KClass<T>) = usingAssertions(
+        clazz,
+        { a: T, e: T -> Assertions.assertThat(a).isEqualTo(e) },
+        { a: Iterable<T>?, e: Iterable<T>? -> Assertions.assertThat(a).isEqualTo(e) })
+
+    fun <T : Any> usingIgnoringFieldsComparator(clazz: KClass<T>, vararg fieldsToIgnore: String) = usingAssertions(
+        clazz,
+        { a: T, e: T -> Assertions.assertThat(a).usingRecursiveComparison().ignoringFields(*fieldsToIgnore).isEqualTo(e) },
+        { a: Iterable<T>?, e: Iterable<T>? ->
+            Assertions.assertThat(a).usingRecursiveFieldByFieldElementComparatorIgnoringFields(*fieldsToIgnore).isEqualTo(e)
+        })
+
+    class Matcher<T : Any> internal constructor(
+        private val kClass: KClass<T>,
+        private val assertion: BiConsumer<T, T>,
+        private val iterableAssertion: BiConsumer<Iterable<T>, Iterable<T>>
+
+    ) {
+        fun assertMatch(actual: T, expected: T): Unit = assertion.accept(actual, expected)
+
+        fun assertMatch(actual: Iterable<T>, vararg expected: T): Unit = assertMatch(actual, listOf(*expected))
+
+        fun assertMatch(actual: Iterable<T>, expected: Iterable<T>): Unit = iterableAssertion.accept(actual, expected)
+
+        fun contentJson(expected: T): ResultMatcher =
+            ResultMatcher { result -> assertMatch(JsonUtil.readValue(getContent(result), kClass), expected) }
+
+        fun contentJson(vararg expected: T): ResultMatcher = contentJson(listOf(*expected))
+
+        fun contentJson(expected: Iterable<T>): ResultMatcher =
+            ResultMatcher { result -> assertMatch(JsonUtil.readValues(getContent(result), kClass), expected) }
+
+        fun readFromJson(action: ResultActions): T = JsonUtil.readValue(getContent(action.andReturn()), kClass)
+
+        private fun getContent(result: MvcResult): String = result.response.contentAsString
+    }
+}
Index: src/test/kotlin/ru/javaops/topkotlin/web/AbstractControllerTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/ru/javaops/topkotlin/web/AbstractControllerTest.kt b/src/test/kotlin/ru/javaops/topkotlin/web/AbstractControllerTest.kt
new file mode 100644
--- /dev/null	(date 1698422212796)
+++ b/src/test/kotlin/ru/javaops/topkotlin/web/AbstractControllerTest.kt	(date 1698422212796)
@@ -0,0 +1,22 @@
+package ru.javaops.topkotlin.web
+
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
+import org.springframework.boot.test.context.SpringBootTest
+import org.springframework.test.context.ActiveProfiles
+import org.springframework.test.web.servlet.MockMvc
+import org.springframework.test.web.servlet.ResultActions
+import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder
+import org.springframework.transaction.annotation.Transactional
+
+//https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing-spring-boot-applications
+@SpringBootTest
+@Transactional
+@AutoConfigureMockMvc
+@ActiveProfiles("test")
+abstract class AbstractControllerTest {
+    @Autowired
+    private lateinit var mockMvc: MockMvc
+
+    protected fun perform(builder: MockHttpServletRequestBuilder): ResultActions = mockMvc.perform(builder)
+}
Index: src/test/kotlin/ru/javaops/topkotlin/web/user/UserTestData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/kotlin/ru/javaops/topkotlin/web/user/UserTestData.kt b/src/test/kotlin/ru/javaops/topkotlin/web/user/UserTestData.kt
new file mode 100644
--- /dev/null	(date 1698422823678)
+++ b/src/test/kotlin/ru/javaops/topkotlin/web/user/UserTestData.kt	(date 1698422823678)
@@ -0,0 +1,24 @@
+package ru.javaops.topkotlin.web.user
+
+import ru.javaops.topkotlin.model.Role
+import ru.javaops.topkotlin.model.User
+import ru.javaops.topkotlin.util.JsonUtil
+import ru.javaops.topkotlin.web.MatcherFactory
+import java.util.*
+
+val USER_MATCHER: MatcherFactory.Matcher<User> = MatcherFactory.usingIgnoringFieldsComparator(User::class, "registered", "password")
+const val USER_ID = 1
+const val ADMIN_ID = 2
+const val GUEST_ID = 3
+const val NOT_FOUND = 100
+const val USER_MAIL = "user@yandex.ru"
+const val ADMIN_MAIL = "admin@gmail.com"
+const val GUEST_MAIL = "guest@gmail.com"
+val user: User = User(USER_ID, "User", USER_MAIL, "password", Role.USER)
+val admin: User = User(ADMIN_ID, "Admin", ADMIN_MAIL, "admin", Role.ADMIN, Role.USER)
+val guest: User = User(GUEST_ID, "Guest", GUEST_MAIL, "guest")
+
+fun getNew() = User(null, "New", "new@gmail.com", "newPass", false, Date(), EnumSet.of(Role.USER))
+fun getUpdated() = User(USER_ID, "UpdatedName", USER_MAIL, "newPass", false, Date(), EnumSet.of(Role.ADMIN))
+fun jsonWithPassword(user: User, passw: String) = JsonUtil.writeAdditionProps(user, "password", passw)
+
